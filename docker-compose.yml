version: '3'

services:
  strapi:
    container_name: "${PROJECT_NAME}"
    build:
      context: .
      dockerfile: .docker/strapi/Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
        - NODE_ENV=${NODE_ENV}
    tty: true
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SSL: ${DATABASE_SSL}
      NODE_ENV: ${NODE_ENV}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./backend/:/home/node/app/
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_strapi.rule=Host(`${PROJECT_BASE_URL}`)"
      - "traefik.http.services.${PROJECT_NAME}_strapi.loadbalancer.server.port=1337"

  db:
    build:
      context: .
      dockerfile: .docker/mysql/Dockerfile
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    container_name: "${PROJECT_NAME}_db"
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      interval: 5s
      retries: 10
    
  admin:
    container_name: "${PROJECT_NAME}_adminer"
    image: adminer
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_adminer.rule=Host(`adminer.${PROJECT_BASE_URL}`)"

  traefik:
    image: traefik:v2.0
    container_name: "${PROJECT_NAME}_traefik"
    command: --api.insecure=true --providers.docker
    ports:
    - "${PROJECT_PORT}:80"
    - '8080:8080' # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
